/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define L_BASE 0
#define L_QWERTY 1
#define L_LOWER 2
#define L_RAISE 3
#define L_ADJUST 4

#define _______ &trans

#define Undo   LC(Z)
#define Cut    LC(X)
#define Copy   LC(C)
#define Paste  LC(V)

/ {
  combos {
    compatible = "zmk,combos";
    timeout-ms = <2>;
    grave {
      key-positions = <0 10>;
      bindings = <&kp GRAVE>;
    };
    combo_esc {
      key-positions = <1 11>;
      bindings = <&kp ESC>;
    };
    lshift {
      key-positions = <2 12>;
      bindings = <&skq LSHIFT>;
    };
    semi {
      key-positions = <3 13>;
      bindings = <&kp SEMI>;
    };

    comm {
      key-positions = <6 16>;
      bindings = <&kp COMMA>;
    };
    rshift {
      key-positions = <7 17>;
      bindings = <&skq RSHIFT>;
    }; 
    forward_slash {
      key-positions = <8 18>;
      bindings = <&kp FSLH>;
    };
    back_slash {
      key-positions = <9 19>;
      bindings = <&kp BSLH>;
    };

    lpar {
      key-positions = <22 24>;
      bindings = <&kp LPAR>;
    };

    z {
      key-positions = <22 23>;
      bindings = <&kp Z>;
    };
    quot {
      key-positions = <23 24>;
      bindings = <&kp APOS>;
    };

    rpar {
      key-positions = <27 29>;
      bindings = <&kp RPAR>;
    };
    dot {
      key-positions = <27 28>;
      bindings = <&kp DOT>;
    };
    q {
      key-positions = <28 29>;
      bindings = <&kp Q>;
    };

    combo_cw {
      key-positions = <24 27>;
      bindings = <&caps_word>;
    };
  };

  behaviors {
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <1000>;
      quick-release;
    }; 
    tdlg: tap_dance_less_greater {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_1";
      #binding-cells = <0>;
      tapping-term-ms = <225>;
      bindings = <&kp LT>, <&kp GT>;
    };
    tdbk: tap_dance_brakets {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BRAKETS";
      #binding-cells = <0>;
      tapping-term-ms = <225>;
      bindings = <&kp LBKT>, <&kp RBKT>;
    };
    tdbc: tap_dance_braces {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BRACES";
      #binding-cells = <0>;
      tapping-term-ms = <225>;
      bindings = <&kp LBRC>, <&kp RBRC>;
    };
  };
};

&lt {
  tapping-term-ms = <150>;
  quick-tap-ms = <200>;
};

&caps_word {
  continue-list = <UNDERSCORE BACKSPACE>;
};

/ {
  keymap {
    compatible = "zmk,keymap";
    default_layer {
      label = "ENGRAM";
      bindings = <
         &kp B    &kp Y    &kp O    &kp U    &kp COLON                                     &kp LT     &kp L    &kp D     &kp W    &kp V
         &kp C    &kp I    &kp E    &kp A    &kp TILDE                                     &kp QMARK  &kp H    &kp T     &kp S    &kp N
&kp RALT &kp G    &kp X    &kp J    &kp K    &kp DQT                                       &kp GT     &kp R    &kp M     &kp F    &kp P &kp DEL 
                                &kp LGUI &lt L_LOWER TAB  &kp SPC         &kp BSPC &lt L_RAISE ENTER &kp LCTRL  
      >;
    };

    qwerty_layer {
      label = "QWERTY";
      bindings = <
        &kp Q    &kp W    &kp E    &kp R    &kp T                                     &kp Y    &kp U    &kp I     &kp O    &kp P    
        &kp A    &kp S    &kp D    &kp F    &kp G                                     &kp H    &kp J    &kp K     &kp L    &kp SEMI 
_______ &kp Z    &kp X    &kp C    &kp V    &kp B                                     &kp N    &kp M    &kp COMMA &kp DOT  &kp FSLH  _______
                                    _______ _______ _______              _______ _______ _______ 
      >;
    };

    lower_layer {
      label ="LOWER";
      bindings = <
        &kp EXCL  &kp AT     &kp HASH  &kp DLLR  &kp PRCNT                     &kp STAR  &kp N7    &kp N8    &kp N9    &kp KP_PLUS 
        &kp CARET &kp AMPS   &kp UNDER &kp LBKT  &kp RBKT                      &kp SLASH &kp N4    &kp N5    &kp N6    &kp KP_MINUS
_______ &kp COLON &kp LT     &kp GT    &kp LBRC  &kp RBRC                      &kp N0    &kp N1    &kp N2    &kp N3    &kp EQUAL   _______
                                            _______ _______ _______        _______ &mo L_ADJUST _______ 
      >;
    };

    raise_layer {
      label = "RAISE";
      bindings = <
        &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                                   &kp HOME &kp PG_DN &kp PG_UP &kp END     _______   
        &kp F6  &kp F7  &kp F8  &kp F9  &kp F10                                  &kp LEFT &kp DOWN  &kp UP    &kp RIGHT   _______ 
_______ &kp F11 &kp F12 _______ _______ _______                                  _______  _______   _______   _______     _______ _______
                          _______  &mo L_ADJUST  _______           _______ _______ _______ 
      >;
    };
    
    adjust_layer {
      label = "ADJUST";
      bindings = <
        &to L_BASE &to L_QWERTY _______       &none     &none                         &ext_power EP_TOG &out OUT_TOG  &bt BT_NXT   &none     &kp KP_NUM
        &reset       _______    _______       _______   &bt BT_CLR                    &reset            &none         &none        &none     &kp CAPS  
_______ _______      _______    _______       _______   _______                       &none             _______       _______      _______   &kp SLCK    _______
                                               _______ &kp LGUI &kp SPC        &kp ENTER &kp RALT _______ 
      >;
    };
  };
};


